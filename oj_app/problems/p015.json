{
    "id": "p015",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j != k and nums[i] + nums[j] + nums[k] == 0.",
    "input_description": "The first line contains n, followed by n space-separated integers.",
    "output_description": "All unique triplets that sum to zero, each on a separate line as space-separated integers.",
    "samples": [
        {
            "input": "6\n-1 0 1 2 -1 -4",
            "output": "-1 -1 2\n-1 0 1"
        },
        {
            "input": "1\n0",
            "output": ""
        }
    ],
    "constraints": "0 <= nums.length <= 3000\n-10^5 <= nums[i] <= 10^5",
    "testcases": [
        {
            "input": "6\n-1 0 1 2 -1 -4",
            "output": "-1 -1 2\n-1 0 1"
        },
        {
            "input": "1\n0",
            "output": ""
        },
        {
            "input": "3\n0 0 0",
            "output": "0 0 0"
        }
    ],
    "hint": "Sort the array first, then use a combination of iteration and two-pointer technique.",
    "source": "LeetCode",
    "tags": [
        "array",
        "two-pointers"
    ],
    "time_limit": 1.0,
    "memory_limit": 256,
    "author": "LeetCode",
    "difficulty": "medium"
}