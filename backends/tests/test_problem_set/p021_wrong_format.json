{
    "id": "p021",
    "description": "Given the root of a binary tree, return the inorder traversal of its nodes' values.",
    "input_description": "The first line contains n, the number of nodes in the tree. The next n lines contain the node values in level order (left to right), with 'null' indicating no node at that position.",
    "output_description": "A list of integers representing the inorder traversal of the binary tree.",
    "samples": [
        {
            "input": "3\n1\nnull\n2\n3",
            "output": "[1,3,2]"
        },
        {
            "input": "1\n1",
            "output": "[1]"
        }
    ],
    "constraints": "The number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100",
    "testcases": [
        {
            "input": "3\n1\nnull\n2\n3",
            "output": "[1,3,2]"
        },
        {
            "input": "1\n1",
            "output": "[1]"
        },
        {
            "input": "5\n1\n2\n3\n4\n5",
            "output": "[4,2,5,1,3]"
        },
        {
            "input": "0",
            "output": "[]"
        }
    ],
    "hint": "Inorder traversal follows the left-root-right order. You can implement this recursively or iteratively using a stack.",
    "source": "LeetCode",
    "tags": [
        "binary-tree",
        "depth-first-search",
        "stack"
    ],
    "time_limit": 1.0,
    "memory_limit": 256,
    "author": "LeetCode",
    "difficulty": "easy"
}